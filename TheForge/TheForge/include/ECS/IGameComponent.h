#ifndef IGAMECOMPONENT_H
#define IGAMECOMPONENT_H

// Allows use of c++ managed pointers
#include <memory>

struct float3
{
public:
	float3() : x(0), y(0), z(0) {};
	float3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {};
	float x;
	float y;
	float z;
};

enum GameComponentType
{
	MESH = 0, 
	BOX_COLLIDER, 
	RIGID_BODY, 
	AI, 
	STATS, 
	MOVEMENT_CONTROLLER,
	AUDIO_CONTROLLER
};

class IGameComponent 
{
	public:
		IGameComponent(GameComponentType _type) { }
		~IGameComponent() { }
		virtual bool Init() = 0;
		virtual void Destroy() = 0;
		virtual void Update(float _deltaTime) = 0;
		// Get this components type
		GameComponentType GetComponentType() { return type; }
		// Get this components GameID
		int GetGameID() { return gameID; }

	protected:
		// GameID should be a unique int val (generated by time)
		int gameID;
		GameComponentType type;
};

typedef std::shared_ptr<IGameComponent> IGameComponentPtr;

#endif